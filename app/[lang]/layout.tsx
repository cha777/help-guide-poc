import type { Metadata } from 'next';
import Image from 'next/image';
import { Geist, Geist_Mono } from 'next/font/google';
import { Footer, LastUpdated, Layout, Navbar } from 'nextra-theme-docs';
import { Head, Search } from 'nextra/components';
import { getPageMap } from 'nextra/page-map';

import { getDictionary, getDirection } from '@/app/_dictionaries/get-dictionary';
import type { Locale } from '@/app/_dictionaries/i18n-config';

import '@/app/globals.css';

const geistSans = Geist({
  variable: '--font-geist-sans',
  subsets: ['latin'],
});

const geistMono = Geist_Mono({
  variable: '--font-geist-mono',
  subsets: ['latin'],
});

export const metadata: Metadata = {
  title: {
    default: 'DirectFN Pro12 – User Guide',
    template: '%s | DirectFN Pro12',
  },
  description: 'Generated by create next app',
};

const navbar = (
  <Navbar
    logo={
      <Image
        src='/logo.png'
        alt='logo'
        width={100}
        height={100}
      />
    }
  />
);

const footer = (
  <Footer className='items-center flex-row justify-between'>
    <p>{new Date().getFullYear()} © DirectFN.</p>
    <p>v{process.env.APP_VERSION}</p>
  </Footer>
);

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ lang: string }>;
}>) {
  const { lang } = await params;
  const dictionary = await getDictionary(lang);
  const pageMap = await getPageMap(`/${lang}`);

  return (
    <html
      lang={lang}
      dir={getDirection(lang as Locale)}
      suppressHydrationWarning
    >
      <Head />
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <Layout
          navbar={navbar}
          footer={footer}
          i18n={[
            { locale: 'en', name: 'English' },
            { locale: 'ar', name: 'عربي' },
          ]}
          sidebar={{ autoCollapse: true, defaultMenuCollapseLevel: 1 }}
          toc={{
            backToTop: dictionary.backToTop,
            title: dictionary.tocTitle,
          }}
          search={
            <Search
              emptyResult={dictionary.searchEmptyResult}
              errorText={dictionary.searchError}
              loading={dictionary.searchLoading}
              placeholder={dictionary.searchPlaceholder}
            />
          }
          editLink={null}
          feedback={{ content: null, labels: '' }}
          pageMap={pageMap}
          lastUpdated={<LastUpdated>{dictionary.lastUpdated}</LastUpdated>}
          themeSwitch={{
            dark: dictionary.dark,
            light: dictionary.light,
            system: dictionary.system,
          }}
          navigation={{
            prev: true,
            next: true,
          }}
        >
          {children}
        </Layout>
      </body>
    </html>
  );
}
